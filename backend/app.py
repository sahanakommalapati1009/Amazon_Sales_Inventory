import streamlit as st
import pandas as pd
from sqlalchemy import create_engine

# Create a connection to the database
engine = create_engine('postgresql://postgres:Akhila%4012345@localhost/test')

# Function to execute SQL queries
def execute_query(query):
    with engine.connect() as con:
        result = pd.read_sql(query, con)
    return result

# Function to fetch data from the selected table
def fetch_data(table_name):
    query = f"SELECT * FROM {table_name};"
    with engine.connect() as con:
        df = pd.read_sql(query, con)
    return df

# Inject CSS with background image and set specific text colors and styles
def inject_background_image():
    st.markdown(
        """
        <style>
        .stApp {
            background-image: url("https://static.vecteezy.com/system/resources/previews/035/941/144/non_2x/ai-generated-inventory-goods-warehouse-background-photo.jpg");
            background-size: cover;
            background-attachment: fixed;
        }
        /* Setting sidebar widget text color */
        .css-1d391kg, .css-1aumxhk {
            color: black !important;
        }
        /* Setting text color for the title in main area */
        h1 {
            color: white !important;
            text-align: center;
        }
        /* Setting main area text to black with increased intensity */
        .st-bx, .st-bz, .st-ei, .st-fj, .st-gh {
            color: white !important;
            font-weight: bold; /* Increasing intensity */
        }
        /* Sidebar titles color */
        .css-hi6a2p {
            color: Black !important;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

# Main Streamlit application
def main():
    # Set page config to wide mode
    st.set_page_config(layout="wide")

    # Inject background image and set text color
    inject_background_image()

    st.markdown("<h1>Amazon Inventory</h1>", unsafe_allow_html=True)

    # Navigation links in the sidebar
    st.sidebar.title('Navigate')
    selected_nav = st.sidebar.radio('Go to:', ['Home', 'Queries', 'Data Exploration'])

    if selected_nav == 'Home':
        st.write("""
            ## Welcome to Amazon Inventory
            This is a Streamlit web application that allows you to explore Amazon inventory data.
            You can select a table from the sidebar to explore its data and execute specific SQL queries.
        """)

    elif selected_nav == 'Queries':
        st.write("""
            ## Queries
            Here are some common queries you can execute to explore the Amazon inventory data:
            - Top-Selling Products by Category
            - Highest-Selling Product by Category
            - Total Revenue Generated by Each Promotion
            - Number of Orders Placed by Each Customer
            - How does sales channel affect order volume and revenue
            - Identify any seasonal trends in sales
            - Preferred Ship Service by Customers
        """)
        selected_query = st.selectbox('Select Query', ['Top-Selling Products by Category',
                                                       'Highest-Selling Product by Category',
                                                       'Total Revenue Generated by Each Promotion',
                                                       'Number of Orders Placed by Each Customer',
                                                       'How does sales channel affect order volume and revenue',
                                                       'Identify any seasonal trends in sales',
                                                       'Preferred Ship Service by Customers'])
        if selected_query:
            query_dict = {
                'Top-Selling Products by Category': """
                    SELECT p.Category, p.SKU, p.Style, SUM(o.Qty) AS TotalQuantitySold 
                    FROM Orders o
                    JOIN Products p ON o.SKU = p.SKU
                    GROUP BY p.Category, p.SKU, p.Style
                    ORDER BY TotalQuantitySold DESC;
                """,
                'Highest-Selling Product by Category': """
                    WITH RankedProducts AS (
                        SELECT p.Category, p.SKU, p.Style,
                        SUM(o.Qty) AS TotalQuantitySold,
                        ROW_NUMBER() OVER (PARTITION BY p.Category ORDER BY SUM(o.Qty) DESC) AS Rank
                        FROM Orders o JOIN Products p ON o.SKU = p.SKU GROUP BY p.Category, p.SKU, p.Style
                    )
                    SELECT Category, SKU, Style, TotalQuantitySold FROM RankedProducts
                    WHERE Rank = 1
                    ORDER BY TotalQuantitySold DESC;
                """,
                'Total Revenue Generated by Each Promotion': """
                    SELECT pr.PromotionDetails, SUM(o.Amount) AS TotalRevenue
                    FROM Orders o
                    JOIN Promotions pr ON o.PromotionID = pr.PromotionID
                    GROUP BY pr.PromotionDetails
                    ORDER BY TotalRevenue DESC;
                """,
                'Number of Orders Placed by Each Customer': """
                    SELECT c.CustomerID, COUNT(o.OrderID) AS TotalOrders
                    FROM Customers c
                    LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
                    GROUP BY c.CustomerID
                    ORDER BY TotalOrders DESC;
                """,
                'How does sales channel affect order volume and revenue': """
                    SELECT SalesChannel, COUNT(OrderID) AS OrderVolume, SUM(Amount) AS TotalRevenue,
                    SUM(Amount) / COUNT(OrderID) AS AverageOrderValue FROM Orders
                    GROUP BY SalesChannel
                    ORDER BY TotalRevenue DESC;
                """,
                'Identify any seasonal trends in sales': """
                    SELECT
                     EXTRACT(MONTH FROM Date) AS Month,
                     COUNT(OrderID) AS TotalOrders,
                    SUM(Amount) AS TotalRevenue
                    FROM Orders
                    GROUP BY EXTRACT(MONTH FROM Date)
                    ORDER BY Month;
                """,
                'Preferred Ship Service by Customers': """
                    SELECT fo.ShipServiceLevel,
                    COUNT(o.OrderID) AS TotalOrders
                    FROM FulfillmentOptions fo
                    JOIN Orders o ON fo.FulfillmentID = o.FulfillmentID
                    GROUP BY fo.ShipServiceLevel
                    ORDER BY TotalOrders DESC;
                """
            }
            result = execute_query(query_dict[selected_query])
            st.write(result)

    else:
        st.write("""
            ## Data Exploration
            Explore the main tables and columns of the Amazon inventory dataset.
            Use the sidebar to select a table and columns to display.
        """)
        selected_table = st.selectbox('Select Table', ['Customers', 'Promotions', 'FulfillmentOptions', 'Products', 'Orders'])
        if selected_table:
            df = fetch_data(selected_table)
            selected_columns = st.multiselect('Select Columns', df.columns.tolist())
            filtered_df = df[selected_columns] if selected_columns else df
            st.write(filtered_df)

if __name__ == '__main__':
    main()
